func(adj, x, w0, w1, w2, w3, y) {
adj:
  [in] [CPU] adj: i32[12288, 3] {
x:
    [in] [CPU] x: f32[12288, 13] {
w0:
      [in] [CPU] w0: f32[13, 64] {
w1:
        [in] [CPU] w1: f32[13, 64] {
w2:
          [in] [CPU] w2: f32[13, 64] {
w3:
            [in] [CPU] w3: f32[13, 64] {
y:
              [out] [CPU] y: f32[12288, 64] {
                // parallel = openmp
                for i in 0 : 12288 : 1 {
y$1:
                  [cache] [CPU] y$1: f32[13] {
y$2:
                    [cache] [CPU] y$2: f32[13] {
y$3:
                      [cache] [CPU] y$3: f32[13] {
fused.fused.recur:L_elem.recur$1:L_elem.recur$2:L_elem:
                        for recur:i in 0 : 13 : 1 {
                          y$1[recur:i] = 0
                          y$2[recur:i] = 0
                          y$3[recur:i] = 0
                        }
                        // unroll
                        for p in 0 : 3 : 1 {
fused.fused.fused.fused.fused.fused.L_elem.recur$4:L_elem.recur$5:L_elem.L_elem$1.recur$7:L_elem.recur$8:L_elem.L_elem$2:
                          for i$1 in 0 : 13 : 1 {
                            y$1[i$1] += x[adj[i, p], i$1]
                            y$2[i$1] += abs((x[adj[i, p], i$1] - x[adj[i, ((p + 1) %% 3)], i$1]))
                            y$3[i$1] += abs((x[adj[i, p], i$1] - x[i, i$1]))
                          }
                        }
fused.fused.fused.fused.fused.fused.fused.#30.#36.#42.#48.recur$10:L_elem.recur$11:L_elem.recur$12:L_elem.L_elem$3:
                        for einsum:i in 0 : 64 : 1 {
einsum:Y:
                          [cache] [CPU] einsum:Y: f32[1] {
                            einsum:Y[0] = 0
einsum$1:Y:
                            [cache] [CPU] einsum$1:Y: f32[1] {
                              einsum$1:Y[0] = 0
einsum$2:Y:
                              [cache] [CPU] einsum$2:Y: f32[1] {
                                einsum$2:Y[0] = 0
einsum$3:Y:
                                [cache] [CPU] einsum$3:Y: f32[1] {
                                  einsum$3:Y[0] = 0
fused.fused.fused.#27.#33.#39.#45:
                                  for einsum:i$1 in 0 : 13 : 1 {
                                    einsum:Y[0] += (x[i, einsum:i$1] * w0[einsum:i$1, einsum:i])
                                    einsum$1:Y[0] += (y$1[einsum:i$1] * w1[einsum:i$1, einsum:i])
                                    einsum$2:Y[0] += (y$2[einsum:i$1] * w2[einsum:i$1, einsum:i])
                                    einsum$3:Y[0] += (y$3[einsum:i$1] * w3[einsum:i$1, einsum:i])
                                  }
                                  y[i, einsum:i] = (((einsum:Y[0] + einsum$1:Y[0]) + einsum$2:Y[0]) + einsum$3:Y[0])
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}